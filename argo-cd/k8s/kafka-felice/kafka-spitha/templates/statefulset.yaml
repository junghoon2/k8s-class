apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kafka.fullname" . }}
spec:
  selector:
    matchLabels:
      {{- include "kafka.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "kafka.fullname" . }}-hs
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate 
  podManagementPolicy: OrderedReady 
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "kafka.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kafka.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      #### KAFKA CONTAINER ####
      - name: {{ .Chart.Name }}
        securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.images.registry }}/{{ .Chart.Name }}:{{ .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.images.pullPolicy }}
        ports:
        {{- $probePort := 9092 }}
        {{- range $i, $listener := .Values.configs.listener.listeners }}
        - containerPort: {{ $listener.port }}
          name: client-{{ $i }}
          {{- if eq $i 0 }}
            {{ $probePort = $listener.port }}
          {{- end }}
        {{- end }}
        - containerPort: 9100
          name: node-exporter
        - containerPort: 9404
          name: jmx-exporter
        readinessProbe:
          tcpSocket:
            port: {{ $probePort }} 
          # timeoutSeconds: 2
          periodSeconds: 5
          failureThreshold: 2
        startupProbe:
          tcpSocket:
            port: {{ $probePort }}
          # initialDelaySeconds: 10
          periodSeconds: 1
          # timeoutSeconds: 2
          failureThreshold: 600 # when recovery, it may take long time
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        env:
          - name: KAFKA_LOG_DIRS   ## fix for block storage!!
            value: /data/kafka
          ## ZOOKEEPER
          {{- with .Values.configs.zookeeper }}
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: {{ .connect }}
          {{- if .auth.enabled }}
          - name: SKAFKA_ZOOKEEPER_USER
            value: {{ .auth.user }}:{{ .auth.pass }}
          {{- if .auth.acl.enabled }}
          - name: KAFKA_ZOOKEEPER_SET_ACL
            value: "true"
          {{- end }}
          {{- end }}
          {{- end }}

          ## LISTENER
          {{- with .Values.configs.listener }}
            # protocol map
            {{- with .protocolMap }}
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: {{ . }}
            {{- end }}
            # listeners
            {{- $listeners := "" }}
            {{- range .listeners }}
              {{- $listeners = printf "%s,%s://:%d" $listeners .protocol (int .port) }}
            {{- end }}
          - name: KAFKA_LISTENERS
            value: {{ $listeners | trimAll "," }}
          {{- end }}

          ## broker security
          {{- with .Values.configs.brokerSecurity }}
            {{- if .mechanism }}
          - name: KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL
            value: {{ .mechanism }}
            {{- end }}
            {{- if .protocol }}
          - name: KAFKA_SECURITY_INTER_BROKER_PROTOCOL
            value: {{ .protocol }}
            {{- else }}
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: {{ .listener }}
            {{- end }}
          {{- end }}
          
          ## SASL
          {{- if .Values.configs.sasl.enabled }}
            {{- $mechanisms := "" }}
            {{- with .Values.configs.sasl }}
              {{- range .mechanisms }}
                ## scram
                {{- if eq .mechanism "SCRAM" }}
                  {{- $mechanisms = printf "%s,SCRAM-SHA-256,SCRAM-SHA-512" $mechanisms }}
                  # users
                  {{- $users := "" }}
                  {{- $cuser := .client.username }}
                  {{- $cpass := "empty" }}
                  {{- range .users }}
                    {{- $users = printf "%s %s:%s" $users .username .password }}
                    {{- if eq .username $cuser }}
                      {{- $cpass = .password }}
                    {{- end }}
                  {{- end }}
          - name: SKAFKA_SCRAM_USERS
            value: {{ $users }}
          - name: SKAFKA_SCRAM_SHA_256
            value: username="{{ $cuser }}" password="{{ $cpass }}"
          - name: SKAFKA_SCRAM_SHA_512
            value: username="{{ $cuser }}" password="{{ $cpass }}"
                ## oauth
                {{- else if eq .mechanism "OAUTHBEARER" }}
                  {{- $mechanisms = printf "%s,%s" $mechanisms .mechanism }}
          - name: SKAFKA_OAUTHBEARER
            value: clientId="{{ .client.id }}" clientSecret="{{ .client.secret }}"
          - name: KAFKA_SASL_OAUTHBEARER_JWKS_ENDPOINT_URL
            value: {{ .jwks }}
          - name: KAFKA_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL
            value: {{ .token }}
          - name: KAFKA_SASL_OAUTHBEARER_EXPECTED_AUDIENCE
            value: {{ .audience }}
                ## plain
                {{- else if eq .mechanism "PLAIN" }}
                  {{- $mechanisms = printf "%s,%s" $mechanisms .mechanism }}
                  # users
                  {{ $users := "" }}
                  {{- $cuser := .client.username }}
                  {{- $cpass := "empty" }}
                  {{- range .users }}
                    {{- $users = printf "%s user_%s=\"%s\"" $users .username .password }}
                    {{- if eq .username $cuser }}
                      {{- $cpass = .password }}
                    {{- end }}
                  {{- end }}
                  {{ $users = printf "username=\"%s\" password=\"%s\" %s" $cuser $cpass $users }}
          - name: SKAFKA_PLAIN
            value: {{ $users }}
                ## gssapi : kerberos
                {{- else if eq .mechanism "GSSAPI" }}
                  {{- $mechanisms = printf "%s,%s" $mechanisms .mechanism }}
          - name: SKAFKA_GSSAPI
            value: useKeyTab=true storeKey=true debug=true keyTab="{{ .client.keyTab }}"  principal="{{ .client.principal }}"
          - name: KAFKA_SASL_KERBEROS_SERVICE_NAME
            value: {{ .serviceName }}
                {{- end }}
              {{- end }}
          - name: KAFKA_SASL_ENABLED_MECHANISMS
            value: {{ $mechanisms | trimPrefix "," }}
              ## acl
              {{- if .acl.enabled }}
          - name: KAFKA_AUTHORIZER_CLASS_NAME
            value: kafka.security.authorizer.AclAuthorizer
                # superusers
                {{ $superusers := "" }}
                {{- range .acl.superusers }}
                  {{- $superusers = printf "%s;%s" $superusers . }}
                {{- end }}
          - name: KAFKA_SUPER_USERS
            value: {{ $superusers | trimAll ";" }}
                # initial acls
                {{ $acls := "" }}
                {{- range .acl.initialAcls }}
                  {{- $acls = cat $acls . }}
                {{- end }}
          - name: SKAFKA_SCRAM_ACL
            value: {{ $acls }}
              {{- end }}
              {{- with .cmdline }}
          - name: SKAFKA_CLI_PROTOCOL
            value: {{ .protocol }}
          - name: SKAFKA_CLI_MECHANISM
            value: {{ .mechanism }}
              {{- end }}
            {{- end }}
          {{- end }}

          ## heap
          - name: KAFKA_HEAP_OPTS
            {{- $heap := 6 }}
            {{- with .Values.resources.requests }}
              {{- with .memory }}
                {{- $heap = . | mustRegexFind "[0-9]+" | int }}
                {{- $heap = div $heap 2 | min 6 }}
              {{- end }}
            {{- end }}
            value: -Xmx{{ $heap }}G -Xms{{ $heap }}G
          - name: KAFKA_JVM_PERFORMANCE_OPTS
            value: "-server -XX:MetaspaceSize=96m -XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:G1HeapRegionSize=16M -XX:MinMetaspaceFreeRatio=50 -XX:MaxMetaspaceFreeRatio=80 -Djava.awt.headless=true"
          ## internal topic setting
          {{ $rfactor := min .Values.replicaCount 3 }}
          - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            value: "{{ $rfactor }}"
          - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
            value: "{{ $rfactor }}"
          - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
            value: "{{ max (sub $rfactor 1) 1 }}"
          ## jmxExporter
          {{- with .Values.configs.jmxExporter }}
          - name: JMX_PROMETHEUS_ENABLE
            value: "{{ .enabled }}"
          - name: JMX_PROMETHEUS_PORT
            value: "9404"
          {{- end }}
          ## nodeExporter
          {{- with .Values.configs.nodeExporter }}
          - name: RUN_NODE_EXPORTER
            value: "{{ .enabled }}"
          - name: NODE_EXPORTER_PORT
            value: "9100"
          {{- end }}
          ## optional configurations
          {{- with .Values.configs.optional }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        volumeMounts:
        - name: {{ include "kafka.fullname" . }}-logdir
          mountPath: /data
        - name: broker-envs
          mountPath: /config/kubernetes
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # {{- with .Values.affinity }}
      # affinity:
      #   {{- toYaml . | nindent 8 }}
      # {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "kafka.fullname" . }}
              topologyKey: "kubernetes.io/hostname"
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      #### volumes
      volumes:
          - name: broker-envs
            configMap:
              name: {{ include "kafka.fullname" . }}-broker-env
  volumeClaimTemplates:
  - metadata:
      name: {{ include "kafka.fullname" . }}-logdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.configs.volume.storageClass }}
      resources:
        requests:
          storage: {{ .Values.configs.volume.storage }}
