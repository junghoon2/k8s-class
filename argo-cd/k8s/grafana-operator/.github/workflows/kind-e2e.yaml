name: KinD End-to-End

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

env:
  NAME: grafana-operator
  NAMESPACE: grafana-operator-system

jobs:
  end-to-end:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo and checkout submodules
        uses: actions/checkout@v2.4.2
        with:
          submodules: recursive
      - name: Setup go
        uses: actions/setup-go@v3
        with:
          go-version: "^1.18.2"
      - name: Prepare
        id: prep
        shell: bash
        run: |
          VERSION=sha-${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          fi
          echo ::set-output name=BUILD_DATE::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=VERSION::${VERSION}
      - name: Cache container layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
      - name: Set up KinD
        uses: engineerd/setup-kind@v0.5.0
        with:
          # https://kind.sigs.k8s.io/docs/user/ingress/
          version: v0.11.1
          image: kindest/node:v1.23.6
      - name: Build and load (current arch)
        run: |
          docker buildx build --load -t ${{ env.NAME }}:${{ steps.prep.outputs.VERSION }} .
          kind load docker-image ${{ env.NAME }}:${{ steps.prep.outputs.VERSION }}
      - name: Install Kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: "v1.23.6"
      - name: Run e2e
        shell: bash
        run: |
          bash hack/e2e.sh ${{ env.NAME }}:${{ steps.prep.outputs.VERSION }}
      - name: Debug failure
        if: failure()
        run: |
          kubectl version
          kubectl -n $NAMESPACE get all
          kubectl -n $NAMESPACE get grafana
          kubectl get crd
          POD=$(kubectl get pods -n $NAMESPACE -l control-plane=controller-manager --output=jsonpath={.items..metadata.name})
          kubectl logs -n $NAMESPACE $POD -c manager
          cat /tmp/grafana_e2e_debug.txt
          ps -ef |grep port-forward
