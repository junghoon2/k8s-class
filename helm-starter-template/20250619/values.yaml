# Default values for starter-template
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  # Global image registry
  imageRegistry: ""
  # Global image pull secrets
  imagePullSecrets: []
  # Global storage class
  storageClass: ""

# Application configuration
app:
  name: starter-app
  version: "1.0.0"

# Image configuration
image:
  registry: docker.io
  repository: nginx
  tag: "1.25-alpine"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Deployment configuration
deployment:
  replicaCount: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  # Pod configuration
  pod:
    labels: {}
    annotations: {}

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    fsGroup: 65534

  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534
    capabilities:
      drop:
        - ALL

  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  # Liveness and readiness probes
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  # Startup probe (for slow starting containers)
  startupProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30

  # Node selector
  nodeSelector: {}

  # Tolerations
  tolerations: []

  # Affinity
  affinity: {}

  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    # maxUnavailable: 1

# Service configuration
service:
  enabled: true
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations: {}
  labels: {}

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: starter-app.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: starter-app-tls
      hosts:
        - starter-app.example.com

# ServiceAccount configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

# RBAC configuration
rbac:
  create: false
  clusterRole: false # Set to true to create ClusterRole instead of Role
  rules:
    # Example rules for ClusterRole
    # - apiGroups: [""]
    #   resources: ["pods"]
    #   verbs: ["get", "list", "watch"]

# ConfigMap configuration
configMap:
  enabled: true
  data:
    app.properties: |
      server.port=8080
      management.endpoints.web.exposure.include=health,info,metrics
      management.endpoint.health.show-details=always

# Secret configuration
secret:
  enabled: true
  type: Opaque
  data: {}
  stringData:
    # Example secret data
    database-password: "changeme"

# Horizontal Pod Autoscaler
hpa:
  enabled: false
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60

# Network Policy
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              role: frontend
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53

# Volume mounts
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: var-cache
    mountPath: /var/cache/nginx

# Volumes
volumes:
  - name: tmp
    emptyDir: {}
  - name: var-cache
    emptyDir: {}

# Environment variables
env:
  - name: ENV
    value: "production"
  - name: LOG_LEVEL
    value: "info"

# Environment variables from ConfigMap/Secret
envFrom:
  - configMapRef:
      name: '{{ include "starter-template.fullname" . }}-config'
  - secretRef:
      name: '{{ include "starter-template.fullname" . }}-secret'

# Additional labels to add to all resources
commonLabels: {}

# Additional annotations to add to all resources
commonAnnotations: {}
